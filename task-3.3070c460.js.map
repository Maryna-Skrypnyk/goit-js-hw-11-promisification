{"version":3,"sources":["js/task-3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","delay","Promise","resolve","reject","setTimeout","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":";;;AA6FA,aA7FA,QAAA,qBAEA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAAY,GAATC,IAAAA,EAAAA,EAAAA,GACnBC,EAAQR,EAA0B,IAAK,KAEtC,OAAA,IAAIS,QAAQ,SAACC,EAASC,GAC3BC,WAAW,WACUT,KAAKE,SAAW,IAEjCK,EAAQ,CAAEH,GAAAA,EAAIM,KAAML,IAEtBG,EAAOJ,IACNC,MAIDM,EAAa,SAAkB,GAAfP,IAAAA,EAAAA,EAAAA,GAAIM,EAAAA,EAAAA,KACxBE,QAAQC,IAAmBT,eAAAA,OAAAA,EAAmBM,kBAAAA,OAAAA,EAA9C,QAGII,EAAW,SAAAV,GACfQ,QAAQG,KAAqCX,gCAAAA,OAAAA,EAA7C,+BAGFD,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhEX,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ,GAEhEX,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,KAAMC,KAAKN,GAAYO,MAAMJ,GAE/DX,EAAgB,CAAEC,GAAI,GAAIY,OAAQ,MAAOC,KAAKN,GAAYO,MAAMJ","file":"task-3.3070c460.js","sourceRoot":"..\\src","sourcesContent":["import '../sass/main.scss';\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = ({ id }) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id, time: delay });\r\n      }\r\n      reject(id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n\r\n// With Array\r\n// const makeTransaction = transaction => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   return new Promise((resolve, reject) => {\r\n//     setTimeout(() => {\r\n//       const canProcess = Math.random() > 0.3;\r\n//       if (canProcess) {\r\n//         resolve([transaction.id, delay]);\r\n//       }\r\n//       reject(transaction.id);\r\n//     }, delay);\r\n//   });\r\n// };\r\n\r\n// const logSuccess = ([id, time]) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\n// makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\n// makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n\r\n// Callback\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n"]}