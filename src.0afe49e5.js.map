{"version":3,"sources":["js/task-1.js","js/task-2.js","js/task-3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","id","reject","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAgB0B,aAhB1B,QAAA,qBAEA,IAAMA,EAAQ,SAAAC,GAEL,OAAA,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTD,EAAQF,IACPA,MAIDI,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,QAGnBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ;;ACoBjB,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EApCA,QAAA,qBAEA,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC1B,OAAA,IAAIb,QAAQ,SAAAC,GACjBA,EACEW,EAASE,IAAI,SAAAC,GACXA,OAAAA,EAAKN,OAASI,EAAgBE,EAAAA,EAAAA,GAAAA,GAA9B,GAAA,CAAoCL,QAASK,EAAKL,SAAWK,QAM/DZ,EAAS,SAAAa,GAAgBX,OAAAA,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACuEnC,aA7FA,QAAA,qBAEA,IAAMe,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGhDK,EAAkB,SAAY,GAATC,IAAAA,EAAAA,EAAAA,GACnB3B,EAAQoB,EAA0B,IAAK,KAEtC,OAAA,IAAIlB,QAAQ,SAACC,EAASyB,GAC3BxB,WAAW,WACUmB,KAAKE,SAAW,IAEjCtB,EAAQ,CAAEwB,GAAAA,EAAIrB,KAAMN,IAEtB4B,EAAOD,IACN3B,MAID6B,EAAa,SAAkB,GAAfF,IAAAA,EAAAA,EAAAA,GAAIrB,EAAAA,EAAAA,KACxBC,QAAQC,IAAmBmB,eAAAA,OAAAA,EAAmBrB,kBAAAA,OAAAA,EAA9C,QAGIwB,EAAW,SAAAH,GACfpB,QAAQwB,KAAqCJ,gCAAAA,OAAAA,EAA7C,+BAGFD,EAAgB,CAAEC,GAAI,GAAIK,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhEJ,EAAgB,CAAEC,GAAI,GAAIK,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAEhEJ,EAAgB,CAAEC,GAAI,GAAIK,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAE/DJ,EAAgB,CAAEC,GAAI,GAAIK,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH;;AC5BhE,aANA,IAAA,EAAA,EAAA,QAAA,gBAEA,EAAA,EAAA,QAAA,gBAEA,EAAA,EAAA,QAAA,gBAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,QAAA","file":"src.0afe49e5.js","sourceRoot":"..\\src","sourcesContent":["import '../sass/main.scss';\r\n\r\nconst delay = ms => {\r\n  // Мой код\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms\r\n","import '../sass/main.scss';\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    resolve(\r\n      allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user,\r\n      ),\r\n    );\r\n  });\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n// Callback\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\n// export const logger = updatedUsers => console.table(updatedUsers);\r\n\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n","import '../sass/main.scss';\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = ({ id }) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id, time: delay });\r\n      }\r\n      reject(id);\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n\r\n// With Array\r\n// const makeTransaction = transaction => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   return new Promise((resolve, reject) => {\r\n//     setTimeout(() => {\r\n//       const canProcess = Math.random() > 0.3;\r\n//       if (canProcess) {\r\n//         resolve([transaction.id, delay]);\r\n//       }\r\n//       reject(transaction.id);\r\n//     }, delay);\r\n//   });\r\n// };\r\n\r\n// const logSuccess = ([id, time]) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\n\r\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\n\r\n// makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\n\r\n// makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n\r\n// Callback\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\n// const logSuccess = (id, time) => {\r\n//   console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n","import task1 from './js/task-1';\n\nimport task2 from './js/task-2';\n\nimport task3 from './js/task-3';\n\nimport './sass/main.scss';\n"]}